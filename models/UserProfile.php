<?php


namespace fat2fast\auth\models;

use app\models\Resource;
use yii\behaviors\TimestampBehavior;
use yii\helpers\Url;
use app\components\HtmlValidator;
/**
 * This is the model class for table "user_profile".
 *
 * @property int $id
 * @property int $user_id
 * @property string $first_name
 * @property string $last_name
 * @property int $status
 * @property string $profile_img
 * @property string $gender
 * @property int $address
 * @property string $birthday
 * @property string $facebook
 * @property string $zalo
 * @property string $identity_type
 * @property string $identity_number
 * @property int $created_at
 * @property int $updated_at
 * @property string $phone
 */
class UserProfile extends \yii\db\ActiveRecord
{
    const STATUS_DELETED = 0;
    const STATUS_INACTIVE = 9;
    const STATUS_ACTIVE = 10;

    const GENDER_MALE = 'male';
    const GENDER_FEMALE = 'female';
    const GENDER_OTHER = 'other';

    const IDENTITY_TYPE_CMND = 'cmnd';
    const IDENTITY_TYPE_CCCC = 'cccc';
    const IDENTITY_TYPE_PASSPORT = 'passport';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user_profile';
    }

    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            TimestampBehavior::class
        ]); // TODO: Change the autogenerated stub
    }

    public static function getIdentityTypes()
    {
        return [
            self::IDENTITY_TYPE_CCCC => 'Căn cước công dân',
            self::IDENTITY_TYPE_CMND => 'Chứng minh nhân dân',
            self::IDENTITY_TYPE_PASSPORT => 'Hộ chiếu'
        ];
    }

    public function fields()
    {
        return array_merge(parent::fields(), [
            'identityTypes' => function() {
                $arr = [];
                foreach (self::getIdentityTypes() as $k => $v) {
                    $arr[] = [
                        'code' => $k,
                        'label' => $v
                    ];
                }
                return $arr;
            }
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'status', 'created_at', 'updated_at'], 'integer'],
            [['first_name', 'last_name', 'gender', 'birthday', 'profile_img', 'facebook', 'zalo', 'phone'], 'string', 'max' => 255],
            ['address', 'string'],
            [['identity_type', 'identity_number'], 'string'],
            [['first_name', 'last_name'], 'trim'],
            [['first_name', 'last_name'], HtmlValidator::class],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'first_name' => 'First Name',
            'last_name' => 'Last Name',
            'status' => 'Status',
            'profile_img' => 'Ảnh đại diện',
            'gender' => 'Gender',
            'address' => 'Address',
            'birthday' => 'Birthday',
            'facebook' => 'Facebook',
            'zalo' => 'Zalo',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'phone' => 'Phone',
            'identity_type' => 'Identity Type',
            'identity_number' => 'Identity Number'
        ];
    }

    public function getDisplayName()
    {
        return implode(" ", array_filter([
            $this->last_name,
            $this->first_name
        ], function ($item) {
            return !empty($item);
        }));
    }

    public function getImageUrl($resource, $size = 'thumbnail') {
        return \yii\helpers\Url::to(['ticket/image', 'size' => $size, 'token' => $resource->getEncryptedId()]);
    }

    public function getProfileImage()
    {
        if ($this->profile_img) {

            if (strpos($this->profile_img, "https://") !== false) {
                return $this->profile_img;
            }

            $resource = Resource::find()->where(['resource_id' => $this->profile_img])->one();
            if ($resource) {
                return Url::to(["my/download-avatar", 'token' => $resource->getEncryptedId()]);
            }
        }
        return '/img/avatar.png';
        // return Resource::find()->where(['resource_id' => $this->profile_img, 'object_id' => $this->id])->andWhere(['object_type' => 'avatar'])->one();
    }
}
